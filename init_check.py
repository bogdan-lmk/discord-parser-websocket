#!/usr/bin/env python3
"""
–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤
–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–æ—á–µ–º—É —É –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–µ—Ç —Ç–æ–ø–∏–∫–æ–≤
"""

import asyncio
import json
import os
from datetime import datetime
from typing import Dict, List, Set
import structlog
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
structlog.configure(
    processors=[
        structlog.stdlib.filter_by_level,
        structlog.stdlib.add_log_level,
        structlog.processors.TimeStamper(fmt="iso"),
        structlog.dev.ConsoleRenderer(colors=True)
    ],
    wrapper_class=structlog.stdlib.BoundLogger,
    logger_factory=structlog.stdlib.LoggerFactory(),
    cache_logger_on_first_use=True,
)

logger = structlog.get_logger(__name__)

class ServerChannelAnalyzer:
    """–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤"""
    
    def __init__(self):
        load_dotenv()
        self.analysis = {
            "timestamp": datetime.now().isoformat(),
            "servers": {},
            "categories": {
                "with_topics": [],
                "without_topics": [],
                "with_monitored_channels": [],
                "without_monitored_channels": [],
                "with_announcement_channels": [],
                "without_announcement_channels": [],
                "active_servers": [],
                "inactive_servers": []
            },
            "summary": {},
            "recommendations": []
        }
    
    async def analyze_all_servers(self):
        """–ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"""
        logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
        discord_service, telegram_service = await self._initialize_services()
        
        if not discord_service or not telegram_service:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–µ—Ä–≤–∏—Å—ã")
            return False
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
        for server_name, server_info in discord_service.servers.items():
            await self._analyze_server(
                server_name, 
                server_info, 
                discord_service, 
                telegram_service
            )
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤
        self._categorize_servers()
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
        self._generate_summary()
        
        # Cleanup
        await discord_service.cleanup()
        await telegram_service.cleanup()
        
        return True
    
    async def _initialize_services(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤"""
        try:
            from app.config import get_settings
            from app.services.discord_service import DiscordService
            from app.services.telegram_service import TelegramService
            from app.utils.rate_limiter import RateLimiter
            
            settings = get_settings()
            rate_limiter = RateLimiter()
            
            # Discord
            discord_service = DiscordService(settings, rate_limiter)
            if not await discord_service.initialize():
                return None, None
            
            # Telegram
            telegram_service = TelegramService(settings, rate_limiter)
            if not await telegram_service.initialize():
                return None, None
            
            # –°–≤—è–∑—ã–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
            telegram_service.set_discord_service(discord_service)
            
            logger.info(f"‚úÖ –°–µ—Ä–≤–∏—Å—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(discord_service.servers)} —Å–µ—Ä–≤–µ—Ä–æ–≤")
            
            return discord_service, telegram_service
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
            return None, None
    
    async def _analyze_server(self, server_name: str, server_info, discord_service, telegram_service):
        """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞"""
        logger.debug(f"üîç –ê–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–∞: {server_name}")
        
        server_analysis = {
            "name": server_name,
            "guild_id": server_info.guild_id,
            "status": str(server_info.status),
            "channels": {
                "total": len(server_info.channels),
                "accessible": len(server_info.accessible_channels),
                "monitored": 0,
                "announcement": 0,
                "regular_monitored": 0
            },
            "telegram": {
                "has_topic": False,
                "topic_id": None,
                "topic_valid": False
            },
            "issues": [],
            "channel_details": []
        }
        
        # –ê–Ω–∞–ª–∏–∑ –∫–∞–Ω–∞–ª–æ–≤
        announcement_channels = []
        monitored_channels = []
        
        for channel_id, channel_info in server_info.channels.items():
            channel_detail = {
                "id": channel_id,
                "name": channel_info.channel_name,
                "accessible": channel_info.http_accessible,
                "is_announcement": discord_service._is_announcement_channel(channel_info.channel_name),
                "is_monitored": channel_id in discord_service.monitored_announcement_channels,
                "message_count": getattr(channel_info, 'message_count', 0),
                "last_message": getattr(channel_info, 'last_message_time', None)
            }
            
            if channel_detail["is_announcement"]:
                announcement_channels.append(channel_detail)
                server_analysis["channels"]["announcement"] += 1
            
            if channel_detail["is_monitored"]:
                monitored_channels.append(channel_detail)
                server_analysis["channels"]["monitored"] += 1
                
                if not channel_detail["is_announcement"]:
                    server_analysis["channels"]["regular_monitored"] += 1
            
            server_analysis["channel_details"].append(channel_detail)
        
        # –ê–Ω–∞–ª–∏–∑ —Ç–æ–ø–∏–∫–∞ –≤ Telegram
        topic_id = telegram_service.server_topics.get(server_name)
        if topic_id:
            server_analysis["telegram"]["has_topic"] = True
            server_analysis["telegram"]["topic_id"] = topic_id
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ç–æ–ø–∏–∫–∞
            try:
                topic_info = telegram_service.bot.get_forum_topic(
                    chat_id=telegram_service.settings.telegram_chat_id,
                    message_thread_id=topic_id
                )
                server_analysis["telegram"]["topic_valid"] = bool(topic_info)
                
                if not topic_info:
                    server_analysis["issues"].append("–¢–æ–ø–∏–∫ –≤ –∫–µ—à–µ, –Ω–æ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ Telegram")
                    
            except Exception as e:
                server_analysis["telegram"]["topic_valid"] = False
                server_analysis["issues"].append(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–ø–∏–∫–∞: {str(e)}")
        
        # –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º
        self._identify_server_issues(server_analysis, announcement_channels, monitored_channels)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        self.analysis["servers"][server_name] = server_analysis
    
    def _identify_server_issues(self, server_analysis, announcement_channels, monitored_channels):
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å–µ—Ä–≤–µ—Ä–∞"""
        issues = server_analysis["issues"]
        
        # –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–∞–Ω–∞–ª–∞–º–∏
        if server_analysis["channels"]["total"] == 0:
            issues.append("–ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        
        if server_analysis["channels"]["accessible"] == 0:
            issues.append("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        
        if server_analysis["channels"]["announcement"] == 0:
            issues.append("–ù–µ—Ç announcement –∫–∞–Ω–∞–ª–æ–≤")
        
        if server_analysis["channels"]["monitored"] == 0:
            issues.append("–ù–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
        
        # –ü—Ä–æ–±–ª–µ–º—ã —Å —Ç–æ–ø–∏–∫–∞–º–∏
        if not server_analysis["telegram"]["has_topic"]:
            if server_analysis["channels"]["monitored"] > 0:
                issues.append("–ï—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã, –Ω–æ –Ω–µ—Ç —Ç–æ–ø–∏–∫–∞")
            else:
                issues.append("–ù–µ—Ç —Ç–æ–ø–∏–∫–∞ (–∏ –Ω–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤)")
        
        # –ü—Ä–æ–±–ª–µ–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º
        if server_analysis["status"] != "ServerStatus.ACTIVE" and server_analysis["status"] != "active":
            issues.append(f"–°–µ—Ä–≤–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω: {server_analysis['status']}")
        
        # –õ–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–±–ª–µ–º–∞: –ø–æ—á–µ–º—É —Ç–æ–ø–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–µ—Ç—Å—è?
        if (server_analysis["channels"]["monitored"] > 0 and 
            not server_analysis["telegram"]["has_topic"]):
            issues.append("–ö–†–ò–¢–ò–ß–ù–û: –ï—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã, –Ω–æ —Ç–æ–ø–∏–∫ –Ω–µ —Å–æ–∑–¥–∞–Ω!")
        
        # –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        if (server_analysis["channels"]["announcement"] == 0 and 
            server_analysis["channels"]["monitored"] == 0):
            issues.append("–°–µ—Ä–≤–µ—Ä –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    def _categorize_servers(self):
        """–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º"""
        categories = self.analysis["categories"]
        
        for server_name, server_data in self.analysis["servers"].items():
            # –ü–æ –Ω–∞–ª–∏—á–∏—é —Ç–æ–ø–∏–∫–æ–≤
            if server_data["telegram"]["has_topic"]:
                categories["with_topics"].append(server_name)
            else:
                categories["without_topics"].append(server_name)
            
            # –ü–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–º –∫–∞–Ω–∞–ª–∞–º
            if server_data["channels"]["monitored"] > 0:
                categories["with_monitored_channels"].append(server_name)
            else:
                categories["without_monitored_channels"].append(server_name)
            
            # –ü–æ announcement –∫–∞–Ω–∞–ª–∞–º
            if server_data["channels"]["announcement"] > 0:
                categories["with_announcement_channels"].append(server_name)
            else:
                categories["without_announcement_channels"].append(server_name)
            
            # –ü–æ —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            if server_data["status"] in ["ServerStatus.ACTIVE", "active"]:
                categories["active_servers"].append(server_name)
            else:
                categories["inactive_servers"].append(server_name)
    
    def _generate_summary(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ä–µ–∑—é–º–µ"""
        total_servers = len(self.analysis["servers"])
        categories = self.analysis["categories"]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        summary = {
            "total_servers": total_servers,
            "with_topics": len(categories["with_topics"]),
            "without_topics": len(categories["without_topics"]),
            "with_monitored_channels": len(categories["with_monitored_channels"]),
            "without_monitored_channels": len(categories["without_monitored_channels"]),
            "with_announcement_channels": len(categories["with_announcement_channels"]),
            "without_announcement_channels": len(categories["without_announcement_channels"]),
            "active_servers": len(categories["active_servers"]),
            "inactive_servers": len(categories["inactive_servers"])
        }
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        problematic_servers = []
        good_servers_without_topics = []
        
        for server_name, server_data in self.analysis["servers"].items():
            if server_data["issues"]:
                # –°–µ—Ä–≤–µ—Ä—ã —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
                critical_issues = [
                    issue for issue in server_data["issues"] 
                    if "–ö–†–ò–¢–ò–ß–ù–û" in issue
                ]
                
                if critical_issues:
                    problematic_servers.append({
                        "name": server_name,
                        "issues": server_data["issues"],
                        "monitored_channels": server_data["channels"]["monitored"],
                        "has_topic": server_data["telegram"]["has_topic"]
                    })
                
                # –•–æ—Ä–æ—à–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –±–µ–∑ —Ç–æ–ø–∏–∫–æ–≤
                if (server_data["channels"]["monitored"] > 0 and 
                    not server_data["telegram"]["has_topic"]):
                    good_servers_without_topics.append({
                        "name": server_name,
                        "monitored_channels": server_data["channels"]["monitored"],
                        "announcement_channels": server_data["channels"]["announcement"]
                    })
        
        summary["problematic_servers"] = problematic_servers
        summary["good_servers_without_topics"] = good_servers_without_topics
        
        # –ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Ç–æ–ø–∏–∫–æ–≤
        missing_topic_analysis = self._analyze_missing_topics()
        summary["missing_topic_analysis"] = missing_topic_analysis
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        self._generate_recommendations(summary)
        
        self.analysis["summary"] = summary
    
    def _analyze_missing_topics(self):
        """–ê–Ω–∞–ª–∏–∑ –ø—Ä–∏—á–∏–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–ø–∏–∫–æ–≤"""
        missing_analysis = {
            "servers_should_have_topics": 0,
            "servers_reasonably_without_topics": 0,
            "breakdown": {
                "no_channels": 0,
                "no_accessible_channels": 0,
                "no_monitored_channels": 0,
                "has_monitored_but_no_topic": 0,
                "inactive_server": 0
            }
        }
        
        for server_name in self.analysis["categories"]["without_topics"]:
            server_data = self.analysis["servers"][server_name]
            
            if server_data["channels"]["monitored"] > 0:
                # –°–µ—Ä–≤–µ—Ä –î–û–õ–ñ–ï–ù –∏–º–µ—Ç—å —Ç–æ–ø–∏–∫
                missing_analysis["servers_should_have_topics"] += 1
                missing_analysis["breakdown"]["has_monitored_but_no_topic"] += 1
            else:
                # –†–∞–∑—É–º–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ç–æ–ø–∏–∫–∞
                missing_analysis["servers_reasonably_without_topics"] += 1
                
                if server_data["channels"]["total"] == 0:
                    missing_analysis["breakdown"]["no_channels"] += 1
                elif server_data["channels"]["accessible"] == 0:
                    missing_analysis["breakdown"]["no_accessible_channels"] += 1
                elif server_data["status"] not in ["ServerStatus.ACTIVE", "active"]:
                    missing_analysis["breakdown"]["inactive_server"] += 1
                else:
                    missing_analysis["breakdown"]["no_monitored_channels"] += 1
        
        return missing_analysis
    
    def _generate_recommendations(self, summary):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
        recommendations = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞
        if summary["missing_topic_analysis"]["servers_should_have_topics"] > 0:
            count = summary["missing_topic_analysis"]["servers_should_have_topics"]
            recommendations.append(
                f"üö® –ö–†–ò–¢–ò–ß–ù–û: {count} —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –ù–ï –∏–º–µ—é—Ç —Ç–æ–ø–∏–∫–æ–≤!"
            )
            recommendations.append(
                "üîß –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤"
            )
        
        # –ü—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ–¥–∏—Å–∫–∞–≤–µ—Ä–∏
        no_announcement = summary["without_announcement_channels"]
        if no_announcement > summary["total_servers"] * 0.3:  # –ë–æ–ª–µ–µ 30%
            recommendations.append(
                f"üì¢ {no_announcement} —Å–µ—Ä–≤–µ—Ä–æ–≤ –±–µ–∑ announcement –∫–∞–Ω–∞–ª–æ–≤"
            )
            recommendations.append(
                "üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª—ã –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ Telegram –±–æ—Ç"
            )
        
        # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        if summary["inactive_servers"] > 0:
            recommendations.append(
                f"‚ö†Ô∏è {summary['inactive_servers']} –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
            )
            recommendations.append(
                "üîÑ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç—Ç–∏—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤"
            )
        
        # –û–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if summary["without_topics"] > 0:
            recommendations.append(
                "üîç –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –±–æ—Ç (/servers) –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤"
            )
            recommendations.append(
                "‚ö° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'Force Topic Verification' –≤ –±–æ—Ç–µ"
            )
        
        # –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        if summary["with_topics"] == summary["total_servers"]:
            recommendations.append("üéâ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã –∏–º–µ—é—Ç —Ç–æ–ø–∏–∫–∏!")
        elif summary["with_topics"] > summary["total_servers"] * 0.8:  # –ë–æ–ª–µ–µ 80%
            recommendations.append("‚úÖ –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —Å–µ—Ä–≤–µ—Ä–æ–≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        self.analysis["recommendations"] = recommendations
    
    def print_analysis(self):
        """–í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        print("\n" + "="*80)
        print("üîç –î–ï–¢–ê–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –°–ï–†–í–ï–†–û–í –ò –ö–ê–ù–ê–õ–û–í")
        print("="*80)
        
        summary = self.analysis["summary"]
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
        print(f"   ‚Ä¢ –í—Å–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–æ–≤: {summary['total_servers']}")
        print(f"   ‚Ä¢ –° —Ç–æ–ø–∏–∫–∞–º–∏: {summary['with_topics']}")
        print(f"   ‚Ä¢ –ë–µ–∑ —Ç–æ–ø–∏–∫–æ–≤: {summary['without_topics']}")
        print(f"   ‚Ä¢ –° –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏: {summary['with_monitored_channels']}")
        print(f"   ‚Ä¢ –ë–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {summary['without_monitored_channels']}")
        print(f"   ‚Ä¢ –° announcement –∫–∞–Ω–∞–ª–∞–º–∏: {summary['with_announcement_channels']}")
        print(f"   ‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–≤: {summary['active_servers']}")
        
        # –ê–Ω–∞–ª–∏–∑ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–ø–∏–∫–æ–≤
        missing_analysis = summary["missing_topic_analysis"]
        print(f"\nüéØ –ê–ù–ê–õ–ò–ó –û–¢–°–£–¢–°–¢–í–£–Æ–©–ò–• –¢–û–ü–ò–ö–û–í:")
        print(f"   ‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –∏–º–µ—Ç—å —Ç–æ–ø–∏–∫–∏: {missing_analysis['servers_should_have_topics']}")
        print(f"   ‚Ä¢ –°–µ—Ä–≤–µ—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–∑—É–º–Ω–æ –ù–ï –∏–º–µ—é—Ç —Ç–æ–ø–∏–∫–∏: {missing_analysis['servers_reasonably_without_topics']}")
        
        breakdown = missing_analysis["breakdown"]
        print(f"\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–ß–ò–ù:")
        print(f"   ‚Ä¢ –ù–µ—Ç –∫–∞–Ω–∞–ª–æ–≤ –≤–æ–æ–±—â–µ: {breakdown['no_channels']}")
        print(f"   ‚Ä¢ –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {breakdown['no_accessible_channels']}")
        print(f"   ‚Ä¢ –ù–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: {breakdown['no_monitored_channels']}")
        print(f"   ‚Ä¢ –ï—Å—Ç—å –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–µ, –Ω–æ –Ω–µ—Ç —Ç–æ–ø–∏–∫–∞: {breakdown['has_monitored_but_no_topic']}")
        print(f"   ‚Ä¢ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã: {breakdown['inactive_server']}")
        
        # –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä—ã
        if summary["problematic_servers"]:
            print(f"\nüö® –°–ï–†–í–ï–†–´ –° –ö–†–ò–¢–ò–ß–ù–´–ú–ò –ü–†–û–ë–õ–ï–ú–ê–ú–ò ({len(summary['problematic_servers'])}):")
            for server in summary["problematic_servers"][:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
                print(f"   ‚Ä¢ {server['name']}: {server['monitored_channels']} –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
                for issue in server['issues']:
                    if "–ö–†–ò–¢–ò–ß–ù–û" in issue:
                        print(f"     üö® {issue}")
        
        # –•–æ—Ä–æ—à–∏–µ —Å–µ—Ä–≤–µ—Ä—ã –±–µ–∑ —Ç–æ–ø–∏–∫–æ–≤
        if summary["good_servers_without_topics"]:
            print(f"\n‚ú® –°–ï–†–í–ï–†–´ –ì–û–¢–û–í–´–ï –ö –°–û–ó–î–ê–ù–ò–Æ –¢–û–ü–ò–ö–û–í ({len(summary['good_servers_without_topics'])}):")
            for server in summary["good_servers_without_topics"][:10]:
                print(f"   ‚Ä¢ {server['name']}: {server['monitored_channels']} –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö, "
                      f"{server['announcement_channels']} announcement")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if self.analysis["recommendations"]:
            print(f"\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
            for i, rec in enumerate(self.analysis["recommendations"], 1):
                print(f"   {i}. {rec}")
        
        # –ò—Ç–æ–≥–æ–≤—ã–π –¥–∏–∞–≥–Ω–æ–∑
        print(f"\nüéØ –î–ò–ê–ì–ù–û–ó –ü–†–û–ë–õ–ï–ú–´ 20/46 –¢–û–ü–ò–ö–û–í:")
        should_have = missing_analysis["servers_should_have_topics"]
        if should_have > 0:
            print(f"   ‚ùå {should_have} —Å–µ—Ä–≤–µ—Ä–æ–≤ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –Ω–µ –∏–º–µ—é—Ç —Ç–æ–ø–∏–∫–æ–≤")
            print(f"   üí° –≠—Ç–æ –æ–±—ä—è—Å–Ω—è–µ—Ç –Ω–µ–¥–æ—Å—Ç–∞—á—É {should_have} —Ç–æ–ø–∏–∫–æ–≤")
            print(f"   üîß –†–µ—à–µ–Ω–∏–µ: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–ø–∏–∫–æ–≤")
        else:
            print(f"   ‚úÖ –í—Å–µ —Å–µ—Ä–≤–µ—Ä—ã —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏ –∏–º–µ—é—Ç —Ç–æ–ø–∏–∫–∏")
            print(f"   üìù –ù–µ–¥–æ—Å—Ç–∞—é—â–∏–µ —Ç–æ–ø–∏–∫–∏ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º –±–µ–∑ –º–æ–Ω–∏—Ç–æ—Ä–∏–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤")
            print(f"   üí° –≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
        
        print(f"\n" + "="*80)
    
    def save_analysis(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –≤ —Ñ–∞–π–ª"""
        try:
            filename = f"server_channel_analysis_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(self.analysis, f, ensure_ascii=False, indent=2, default=str)
            logger.info(f"‚úÖ –ê–Ω–∞–ª–∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
            
            # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π CSV –æ—Ç—á–µ—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
            csv_filename = f"servers_summary_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            self._create_csv_report(csv_filename)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–∞: {e}")
    
    def _create_csv_report(self, filename):
        """–°–æ–∑–¥–∞–Ω–∏–µ CSV –æ—Ç—á–µ—Ç–∞"""
        try:
            import csv
            
            with open(filename, 'w', newline='', encoding='utf-8') as csvfile:
                fieldnames = [
                    'server_name', 'guild_id', 'status', 'total_channels', 
                    'accessible_channels', 'monitored_channels', 'announcement_channels',
                    'has_topic', 'topic_id', 'topic_valid', 'issues_count'
                ]
                writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
                writer.writeheader()
                
                for server_name, server_data in self.analysis["servers"].items():
                    writer.writerow({
                        'server_name': server_name,
                        'guild_id': server_data['guild_id'],
                        'status': server_data['status'],
                        'total_channels': server_data['channels']['total'],
                        'accessible_channels': server_data['channels']['accessible'],
                        'monitored_channels': server_data['channels']['monitored'],
                        'announcement_channels': server_data['channels']['announcement'],
                        'has_topic': server_data['telegram']['has_topic'],
                        'topic_id': server_data['telegram']['topic_id'],
                        'topic_valid': server_data['telegram']['topic_valid'],
                        'issues_count': len(server_data['issues'])
                    })
            
            logger.info(f"‚úÖ CSV –æ—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {filename}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è CSV: {e}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞"""
    print("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤")
    print("–û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ—á–Ω—É—é –ø—Ä–∏—á–∏–Ω—É –ø—Ä–æ–±–ª–µ–º—ã —Å  —Ç–æ–ø–∏–∫–∞–º–∏")
    print()
    print("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å app.main")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
    print("‚Ä¢ app.main —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø—Ä–æ—Ü–µ—Å—Å–µ")
    print("‚Ä¢ –ù–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")
    print("‚Ä¢ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤ —Å–∏—Å—Ç–µ–º—ã")
    print()
    
    analyzer = ServerChannelAnalyzer()
    
    try:
        success = await analyzer.analyze_all_servers()
        
        if success:
            analyzer.print_analysis()
            analyzer.save_analysis()
            
            print(f"\n‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ JSON –∏ CSV —Ñ–æ—Ä–º–∞—Ç–µ")
            print(f"üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π")
        else:
            print(f"\n‚ùå –ê–Ω–∞–ª–∏–∑ –Ω–µ —É–¥–∞–ª—Å—è")
            
    except KeyboardInterrupt:
        print("\nüõë –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    print("üîç –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ —Å–µ—Ä–≤–µ—Ä–æ–≤ –∏ –∫–∞–Ω–∞–ª–æ–≤...")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –±–µ–∑–æ–ø–∞—Å–µ–Ω –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º")
    print()
    
    asyncio.run(main())